package com.java.res;

import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.faces.context.FacesContext;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

public class CustomerDAOImpl {
	
	SessionFactory sf;
	Session session;
	
	
	public boolean validatePhoneNo(String CUS_PHN_NO) {
		Pattern pattern = Pattern.compile("^\\[+][9][1]-[0-9]{10}");
		Matcher matcher = pattern.matcher(CUS_PHN_NO);
		return matcher.matches();
		
	}
	
	public boolean validateUsername(String CUS_USERNAME) {
	Pattern pattern = Pattern.compile("^[a-zA-Z]");
	Matcher matcher = pattern.matcher(CUS_USERNAME);
	return matcher.matches();
	}
	
	public boolean validatePassword(String CUS_PASSWORD) {
		Pattern pattern = Pattern.compile("^(?=.*[0-9])"
				+ "(?=.*[a-z])(?=.*[A-Z])"
				+"(?=.*[@#$%^&*+=])"
				+"(?=\\S+&)");
		Matcher matcher = pattern.matcher(CUS_PASSWORD);
		return matcher.matches();
	}
	
	public boolean validateEmail(String CUS_EMAIL) {
		Pattern pattern = Pattern.compile("^[A-Za-z0-9+_.-}+@(.+)$");
		Matcher matcher = pattern.matcher(CUS_EMAIL);
		return matcher.matches();
	}
	
	public boolean validateName(String CUS_NAME) {
		Pattern pattern = Pattern.compile("[a-zA-Z]+");
		Matcher matcher = pattern.matcher(CUS_NAME);
		return matcher.matches();
	}

	
	
	public String addCustomerDao(Customer customer) {
		if (validateUsername(customer.getCUS_NAME()) && validateEmail(customer.getCUS_EMAIL())

				&& validatePhoneNo(customer.getCUS_PHN_NO()) && validateName(customer.getCUS_NAME())) {

			String encr = EncryptPassword.getCode(customer.getCUS_PASSWORD());
		sf = SessionHelper.getConnection();
		session = sf.openSession();
		Transaction trans = session.beginTransaction();
		session.save(customer);
		trans.commit();
		return "UpdateCustomer.xhtml?faces-redirect=true";
	}

	
	public String validateMe(Customer customer) {
		String encr = EncryptPassword.getCode(customer.getCUS_PASSWORD());
		Map<String,Object> sessionMap = 
	FacesContext.getCurrentInstance().getExternalContext().getSessionMap();		
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Customer.class);
		cr.add(Restrictions.eq("CUS_USERNAME", customer.getCUS_USERNAME()));
		cr.add(Restrictions.eq("CUS_PASSWORD",encr.trim()));
		cr.setProjection(Projections.rowCount());
		
		long  count =(Long)cr.uniqueResult();
//		System.out.println(count);
		if (count==1) {
			
			return "RestaurantShow.jsp?faces-redirect=true";			
		} else {
			sessionMap.put("errorMessage", "Invalid Credentials...");
			return "Login.jsp?faces-redirect=true";
		}
	}

	
}
